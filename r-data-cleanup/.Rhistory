berdo_data <- read_csv('data/berdo2017.csv')
berdo_data <- read.csv('data/berdo2017.csv')
View(berdo_data)
View(berdo_data)
View(berdo_data)
berdo_data[0,100]
berdo_data[100,0]
berdo_data[1:100,0]
berdo_data[1:100,]
temp <- berdo_data[1:100,]
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
View(temp)
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
temp <- berdo_data[1:3,]
apply(temp$Address + ' ' + temp$ZIP, 1, geocodeAdddress)
temp$fullAddress <- temp$Address + ' ' + temp$ZIP
View(temp)
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
apply(temp$fullAddress, 1, geocodeAdddress)
apply(temp, 1, function(x) geocodeAdddress(x$fullAddress))
install.packages('RJSONIO')
apply(temp, 1, function(x) geocodeAdddress(x$fullAddress))
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
temp <- berdo_data[1,]
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
x$status
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
temp <- berdo_data[1:3,]
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
print(x$status)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.5)  # API only allows 5 requests per second
out
}
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
temp <- berdo_data[1:10,]
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
print(x$status)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(2)  # API only allows 5 requests per second
out
}
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
print(x$status)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat,
x$status)
} else {
out <- c(NA,
NA,
x$status)
}
Sys.sleep(2)  # API only allows 5 requests per second
out
}
(temp$lng, temp$lat, temp$status) <- apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
temp[c('lng', 'lat', 'status')] <- apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
View(temp)
temp <- berdo_data[1:5,]
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
print(x$status)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat,
x$status)
} else {
out <- c('',
'',
x$status)
}
Sys.sleep(2)  # API only allows 5 requests per second
out
}
temp[c('lng', 'lat', 'status')] <- apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat,
x$status)
} else {
out <- c('',
'',
x$status)
}
Sys.sleep(2)  # API only allows 5 requests per second
print(out)
out
}
temp[c('lng', 'lat', 'status')] <- apply(temp, 1, function(x) geocodeAdddress(x['fullAddress']))
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
berdo_data <- read.csv('data/property-assessment-fy2016.csv')
summary(berdo_data)
library(rgeos)
library(sp)
library(rgdal)
install.packages('rgeos','sp','rgdal')
install.packages('rgeos','sp','rgdal')
library(rgeos)
library(sp)
library(rgdal)
install.packages('rgeos')
install.packages('rgdal')
wa.map <- readOGR("data/ZillowNeighborhoods-MA.shp", layer="ZillowNeighborhoods-MA")
install.packages('rgeos')
install.packages('rgdal')
library(rgeos)
library(sp)
library(rgdal)
ma.map <- readOGR("data/ZillowNeighborhoods-MA.shp", layer="ZillowNeighborhoods-MA")
sodo <- ma.map[wa.map$CITY == "Boston", ]
sodo <- ma.map[ma.map$CITY == "Boston", ]
temp <- berdo_data[1:5,]
View(temp)
View(temp)
# Don't use df as name, it is an R function
# Better to set longitudes as the first column and latitudes as the second
dat <- data.frame(Longitude = temp$LONGITUDE,
Latitude =temp$LATITUDE,
names = temp$MAIL_ADDRESS)
# Assignment modified according
coordinates(dat) <- ~ Longitude + Latitude
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile
proj4string(dat) <- proj4string(sodo)
coordinates(dat) <- ~ Longitude + Latitude
View(dat)
temp <- temp[is.numeric(temp$LATITUDE) ,]
View(temp)
temp <- berdo_data[1:5,]
temp$fullAddress <- paste(temp$MAIL_ADDRESS,' ',temp$MAIL_ZIPCODE)
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
temp[is.numeric(temp$LATITUDE) ,]
temp[grep("[[:digit:]]", temp$LATITUDE) ,]
temp <- temp[grep("[[:digit:]]", temp$LATITUDE) ,]
# Don't use df as name, it is an R function
# Better to set longitudes as the first column and latitudes as the second
dat <- data.frame(Longitude = temp$LONGITUDE,
Latitude =temp$LATITUDE,
names = temp$MAIL_ADDRESS)
coordinates(dat) <- ~ Longitude + Latitude
View(dat)
summary(dat)
dat <- data.frame(Longitude = temp$LONGITUDE,
Latitude =temp$LATITUDE,
names = temp$MAIL_ADDRESS)
summary(dat)
View(dat)
coordinates(dat) <- ~ Longitude + Latitude
temp$LONGITUDE
temp <- subset(temp, numbers <= 3)
temp[] <- lapply(temp, function(x) if(is.factor(x)) factor(x) else x)
dat <- data.frame(Longitude = temp$LONGITUDE,
Latitude =temp$LATITUDE,
names = temp$MAIL_ADDRESS)
coordinates(dat) <- ~ Longitude + Latitude
summary(dat)
# Don't use df as name, it is an R function
# Better to set longitudes as the first column and latitudes as the second
dat <- data.frame(Longitude = as.numeric(temp$LONGITUDE),
Latitude =as.numeric(temp$LATITUDE),
names = temp$MAIL_ADDRESS)
coordinates(dat) <- ~ Longitude + Latitude
proj4string(dat) <- proj4string(sodo)
over(dat, sodo)
summary(dat)
over(sodo, dat)
over(dat, sodo)
library(RJSONIO)
berdo_data <- read.csv('data/BERDOBuildingAdresses.csv')
berdo_data <- read.csv('data/BERDOBuildingAdresses.csv')
berdo_data <- read.csv('data/BERDOBuildingAddresses.csv')
summary(berdo_data)
temp <- berdo_data[1:5,]
temp$fullAddress <- paste(temp$Address,' ',temp$ZIP)
View(temp)
geocodeAddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat,
x$status)
} else {
out <- c('',
'',
x$status)
}
Sys.sleep(2)  # API only allows 5 requests per second
print(out)
out
}
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
temp$fullAddress <- paste(temp$Address,' Boston MA ',temp$ZIP)
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
temp[[temp$status!="OVER_QUERY_LIMIT"]]
temp[[temp$status!="OVER_QUERY_LIMIT"],]
library(dplyr)
filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
View(locationFound)
View(locationMissing)
berdo_data$fullAddress <- paste(berdo_data$Address,' Boston MA ',temp$ZIP)
berdo_data[,c('lng', 'lat', 'status')] <- t(apply(berdo_data, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(berdo_data, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(berdo_data, status=="OVER_QUERY_LIMIT")
write.csv(locationFound, 'data/taxBuildingLatLon.csv')
temp<-locationMissing
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon2.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
geocodeAddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false&key=AIzaSyBBPRj49j8PXNKiF2fcfFKhFStQ66QVj7Q", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat,
x$status)
} else {
out <- c('',
'',
x$status)
}
Sys.sleep(2)  # API only allows 5 requests per second
print(out)
out
}
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
View(locationMissing)
View(locationMissing)
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon3.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp$fullAddress <- paste(temp$Address,' Boston MA')
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon4.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
View(temp)
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon5.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon6.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp$fullAddress <- paste(temp$Address,' ', temp$ZIP)
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon7.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon8.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
temp[,c('lng', 'lat', 'status')] <- t(apply(temp, 1, function(x) geocodeAdddress(x['fullAddress'])))
locationFound <- filter(temp, status!="OVER_QUERY_LIMIT")
locationMissing <- filter(temp, status=="OVER_QUERY_LIMIT")
temp<-locationMissing
write.csv(locationFound, 'data/taxBuildingLatLon9.csv')
write.csv(locationMissing, 'data/taxBuildingLatLonMissing.csv')
